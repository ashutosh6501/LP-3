# -*- coding: utf-8 -*-
"""Assignment2_modified.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15ZbYRuD-eR7h-1QUrmPBu-BjW4WG3NDd

### Download libraries
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import zipfile
import cv2
import plotly.express as px


from sklearn.preprocessing import StandardScaler, normalize
from sklearn.cluster import KMeans

# %matplotlib inline

df = pd.read_csv('/content/sales_data_sample.csv', encoding = 'unicode_escape', parse_dates=['ORDERDATE'])
df.head()

df.dtypes

df.info()

df.isna().mean()

df_drop  = ['ADDRESSLINE1', 'ADDRESSLINE2', 'POSTALCODE', 'CITY', 'TERRITORY', 'PHONE', 'STATE', 'CONTACTFIRSTNAME', 'CONTACTLASTNAME', 'CUSTOMERNAME', 'ORDERNUMBER']
df = df.drop(df_drop, axis=1)
df.head(3)

"""#### Drop georaphic features and names, phone"""

df.shape

df.isna().sum()

def barplot_visualization(x):
  fig = plt.Figure(figsize = (12, 6))
  fig = px.bar(x = df[x].value_counts().index, y = df[x].value_counts(), color = df[x].value_counts().index, height = 600)
  fig.show();

barplot_visualization('COUNTRY')

barplot_visualization('STATUS');

"""#### Drop unbalanced feature """

df.drop(columns=['STATUS'], axis=1, inplace=True)

print('Columns resume: ', df.shape[1])

barplot_visualization('PRODUCTLINE')

barplot_visualization('DEALSIZE')

"""### Prepare data"""

def dummies(x):
  dummy = pd.get_dummies(df[x])
  df.drop(columns=x, inplace=True)
  return pd.concat([df, dummy], axis = 1)

df =  dummies('COUNTRY')

df =  dummies('PRODUCTLINE')

df =  dummies('DEALSIZE')

df.head()

y = pd.Categorical(df['PRODUCTCODE'])
y

df['PRODUCTCODE'] = pd.Categorical(df['PRODUCTCODE']).codes

df.head()

df_group = df.groupby(by='ORDERDATE').sum()
fig = px.line(x = df_group.index, y = df_group.SALES, title='sales_peak')
fig.show();

df.drop('ORDERDATE', axis=1, inplace=True)

"""#### drop 'ORDERDATE', 'QTR_ID' because we have 'MONTH' etc."""

df.drop('QTR_ID', axis=1, inplace=True)

df.shape

"""## Use K-MEANS algorithm"""

scaler =  StandardScaler()
df_scaled = scaler.fit_transform(df)

scores = []
range_values = range(1, 15)
for i in range_values:
  kmeans = KMeans(n_clusters = i)
  kmeans.fit(df_scaled)
  scores.append(kmeans.inertia_)

plt.plot(scores, 'bx-')
plt.title('Finding right number of clusters')
plt.xlabel('Clusters')
plt.ylabel('scores') 
plt.show();

"""#### The elbow method"""

kmeans = KMeans(4)
kmeans.fit(df_scaled)

labels = kmeans.labels_
labels

kmeans.cluster_centers_.shape

cluster_centers = pd.DataFrame(data = kmeans.cluster_centers_, columns= [df.columns])
cluster_centers

"""#### Invert the data"""

cluster_centers = scaler.inverse_transform(cluster_centers)
cluster_centers = pd.DataFrame(data=cluster_centers, columns=[df.columns])
cluster_centers



sales_of_cluster = pd.concat([df, pd.DataFrame({'cluster': labels})], axis=1)
sales_of_cluster.head()